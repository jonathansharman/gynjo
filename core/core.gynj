{
	// List operations

	let len = l -> {
		let result = 0;
		while l != [] do {
			let result = result + 1;
			let l = pop(l);
		};
		result
	};

	let nth = (l, n) -> {
		while n > 0 do {
			let n = n - 1;
			let l = pop(l);
		};
		l[0]
	};

	let reverse = l -> {
		let result = [];
		while l != [] do {
			let result = [l[0]] | result;
			let l = pop(l);
		};
		result
	};

	let insert = (l, index, value) ->
		if index = 0 then [value] | l else {
			let result = [];
			let i = 0;
			while l != [] do {
				if i = index then let result = [value] | result;
				let result = [l[0]] | result;
				let l = pop(l);
				let i = i + 1;
			};
			reverse(result)
		};

	let remove = (l, index) ->
		if index = 0 then pop(l) else {
			let result = [];
			let i = 0;
			while l != [] do {
				if i != index then let result = [l[0]] | result;
				let l = pop(l);
				let i = i + 1;
			};
			reverse(result)
		};

	let map = (l, f) -> {
		let result = [];
		while l != [] do {
			let result = [f(l[0])] | result;
			let l = pop(l);
		};
		reverse(result)
	};

	let reduce = (l, acc, f) -> {
		while l != [] do {
			let acc = f(acc, l[0]);
			let l = pop(l);
		};
		acc
	};

	let flatmap = (l, f) -> reduce(map(l, f), [], (a, b) -> a | b);

	let range = (start, end) -> {
		let result = [];
		while end >= start do {
			let result = [end] | result;
			let end = end - 1;
		};
		result
	};

	// Basic math

	let abs = x -> if x < 0 then -x else x;
	let sqrt = x -> x^(1/2);
	let cbrt = x -> x^(1/3);

	// Combinatorics

	let fact = n -> {
		let result = 1;
		while n > 1 do {
			let result = n result;
			let n = n - 1;
		};
		result
	};

	let nPk = (n, k) -> if k = 0 then 1 else n nPk(n-1, k-1);

	let nCk = (n, k) -> nPk(n, k) / fact(k);

	// Temperature conversion

	let ftoc = f -> 5/9(f - 32);
	let ctof = c -> 9/5c + 32;
}
